<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>js on nhs000 blog</title>
    <link>https://nhs000.github.io/tags/js/</link>
    <description>Recent content in js on nhs000 blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>nhs000</copyright>
    <lastBuildDate>Wed, 24 Feb 2021 14:22:19 +0700</lastBuildDate>
    
	<atom:link href="https://nhs000.github.io/tags/js/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Receive Protobuf Message From GCP Pubsub</title>
      <link>https://nhs000.github.io/posts/tech/2021-02-24-receive-protobuf-message-from-gcp-pubsub/</link>
      <pubDate>Wed, 24 Feb 2021 14:22:19 +0700</pubDate>
      
      <guid>https://nhs000.github.io/posts/tech/2021-02-24-receive-protobuf-message-from-gcp-pubsub/</guid>
      <description>In this blog, I&amp;rsquo;ll show you how to receive a pubsub message in protobuf format and insert it into a MongoDB server. There&amp;rsquo;re many resources about handling pubsub message in NodeJS, but we were in trouble to find any resources about handling message in protobuf format except the one in Kotlin. But turn out it&amp;rsquo;s quite simple, we just need 4 steps:
 Create a client subscribes to the subscription Receive raw message in binary Decode it into JS object using protofile Done  By doing this kind of process through a queue and using protobuf format, we&amp;rsquo;re able to handle millions of requests per day with only one single core VM.</description>
    </item>
    
  </channel>
</rss>